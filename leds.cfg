#####################################################################
#  Leds Definitions
#####################################################################

#####################################################################
#  Neopixel Definitions
#####################################################################
[neopixel caselight]
# pin: octopus:NEOPIXEL 
pin: ramps:ar5
# pin: ramps:PL5
# pin: ramps:PG5
chain_count: 60
color_order: GRB
# color_order: RGB
initial_RED:	0.0
initial_GREEN:	0.0
initial_BLUE:	0.0

[neopixel console]
pin: ramps:ar4
chain_count: 2
color_order: GRB
# color_order: RGB
initial_RED:	0.0
initial_GREEN:	0.0
initial_BLUE:	0.0

######################
#     LED Macros     #
######################
[gcode_macro CASELIGHT_TOGGLE]
description: Toggle light
gcode:
    # command params
    {% set mode = params.MODE %}
    # variables
    # features
    _LEDS_TOGGLE LED='caselight' MODE={mode}
    UPDATE_DELAYED_GCODE ID=_CONSOLE_CASELIGHT_TOGGLE DURATION=0.1

[delayed_gcode _CONSOLE_CASELIGHT_TOGGLE]
gcode:
    _SET_LED_STATE_BY_NAME LED='console_caselight' STATE={printer.save_variables.variables.leds.caselight.mode} TRANSMIT=1

[gcode_macro _SET_LEDS]
description: Set neopixel led values by index.
gcode:
    # command params
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set indexes_list = (params.INDEX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set index = [] %}
    {% for led_indexes in indexes_list %}
        {% if '-' in led_indexes %}
            {% set index_series = led_indexes.split('-') %}
            {% for i in range(index_series[0]|int, index_series[1]|int + 1) %}
                {% set _dummy = index.append(i|string) %}
            {% endfor %}
        {% else %}
            {%  set _dummy = index.append(led_indexes) %}
        {% endif%}
    {% endfor %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== _SET_LEDS =====")}
        {action_respond_info("[red: '%s', green: '%s', blue: '%s', white: '%s']" % (red,green,blue,white))}
        {action_respond_info("led: '%s'" % (led))}
        {action_respond_info("index: '%s'" % (index))}
        {action_respond_info("transmit_last: '%s'" % (transmit_last))}
        {action_respond_info("===============")}
    {% endif %}

    {% for led_index in index %}
        {% set transmit=transmit_last if loop.last else 0 %}
        SET_LED LED={led} RED={red} GREEN={green} BLUE={blue} WHITE={white} INDEX={led_index} TRANSMIT={transmit}
    {% endfor %}

[gcode_macro _SET_LED_STATE_BY_NAME]
description: Set neopixel leds to a color based on a state name, if no LED is defined all leds will be set.
gcode:
    # command params
    {% set led_name = params.LED|lower %}
    {% set state_name = params.STATE|lower %}
    {% set transmit = params.TRANSMIT|default(1) %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set neopixel_leds = printer["gcode_macro _USER_VARIABLE"].neopixel_leds %}
    {% set neopixel_led = neopixel_leds[led_name] %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== _SET_LED_STATE_BY_NAME =====")}
        {action_respond_info("led_name: '%s'" % (led_name))}
        {action_respond_info("state_name: '%s'" % (state_name))}
        {action_respond_info("neopixel_leds: '%s'" % (neopixel_leds))}
        {action_respond_info("transmit: '%s'" % (transmit))}
        {action_respond_info("===============")}
    {% endif %}

    {% if led_name and not neopixel_led %}
        {% set array = namespace(output = "") %}
        {% set element = "Unknown LED '%s'. Defined leds are:" % (led_name) %}
        {% set array.output = array.output + element + "\n"%}
        {% for name, neopixel_led in neopixel_leds.items() %}
            {% set element = "'%s' " % (name) %}
            {% set array.output = array.output + element %}
        {% endfor %}
        {action_respond_info("%s" % (array.output))}
    {% elif led_name and neopixel_led %}
        {% set neopixel_state = neopixel_led.states[state_name] %}
        {% if neopixel_state %}
            _SET_LEDS LED={neopixel_led.name} RED={neopixel_state.r} GREEN={neopixel_state.g} BLUE={neopixel_state.b} WHITE={neopixel_state.w} INDEX="{neopixel_led.index}" TRANSMIT={transmit} DEBUG={debug}
        {% endif %}
    {% else %}
        {% for led_name, neopixel_led in neopixel_leds.items() %}
            {% set neopixel_state = neopixel_led.states[state_name] %}
            {% if neopixel_state %}
                _SET_LEDS LED={neopixel_led.name} RED={neopixel_state.r} GREEN={neopixel_state.g} BLUE={neopixel_state.b} WHITE={neopixel_state.w} INDEX="{neopixel_led.index}" TRANSMIT={transmit} DEBUG={debug}
            {% endif %}
        {% endfor %}
    {% endif %}

[gcode_macro _SET_LED_COLOR_BY_NAME]
description: Set neopixel leds to a color based.
gcode:
    # command params
    {% set led_name = params.LED|lower %}
    {% set color_name = params.COLOR|lower %}
    {% set transmit = params.TRANSMIT|default(1) %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set neopixel_leds = printer["gcode_macro _USER_VARIABLE"].neopixel_leds %}
    {% set neopixel_led = neopixel_leds[led_name] %}
    {% set neopixel_colors = printer["gcode_macro _USER_VARIABLE"].neopixel_colors %}
    {% set neopixel_color = neopixel_colors[color_name] %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== _SET_LED_COLOR_BY_NAME =====")}
        {action_respond_info("led_name: '%s'" % (led_name))}
        {action_respond_info("color_name: '%s'" % (color_name))}
        {action_respond_info("transmit: '%s'" % (transmit))}
        {action_respond_info("neopixel_leds: '%s'" % (neopixel_leds))}
        {action_respond_info("neopixel_led: '%s'" % (neopixel_led))}
        {action_respond_info("neopixel_colors: '%s'" % (neopixel_colors))}
        {action_respond_info("===============")}
    {% endif %}

    {% if not neopixel_color %}
        {% set array = namespace(output = "") %}
        {% set element = "Unknown COLOR '%s'. Defined colors are:" % (color_name) %}
        {% set array.output = array.output + element + "\n"%}
        {% for name, neopixel_color in neopixel_colors.items() %}
            {% set element = "'%s' " % (name) %}
            {% set array.output = array.output + element %}
        {% endfor %}
        {action_respond_info("%s" % (array.output))}
    {% elif led_name and not neopixel_led %}
        {% set array = namespace(output = "") %}
        {% set element = "Unknown LED '%s'. Defined leds are:" % (led_name) %}
        {% set array.output = array.output + element + "\n"%}
        {% for name, neopixel_led in neopixel_leds.items() %}
            {% set element = "'%s' " % (name) %}
            {% set array.output = array.output + element %}
        {% endfor %}
        {action_respond_info("%s" % (array.output))}
    {% elif led_name and neopixel_led %}
        {% if neopixel_led and neopixel_color %}
            _SET_LEDS LED={neopixel_led.name} RED={neopixel_color.r} GREEN={neopixel_color.g} BLUE={neopixel_color.b} WHITE={neopixel_color.w} INDEX="{neopixel_led.index}" TRANSMIT={transmit} DEBUG={debug}
        {% endif %}
    {% else %}
        {% for led_name, neopixel_led in neopixel_leds.items() %}
            _SET_LEDS LED={neopixel_led.name} RED={neopixel_color.r} GREEN={neopixel_color.g} BLUE={neopixel_color.b} WHITE={neopixel_color.w} INDEX="{neopixel_led.index}" TRANSMIT={transmit} DEBUG={debug}
        {% endfor %}
    {% endif %}

[gcode_macro _LED_PAUSE]
description: Pause for 1 second and let LED commands finish.
gcode:
    # command params
    {% set duration = params.DURATION|default(1000)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _LED_PAUSE ====")}
        {action_respond_info("duration: '%s'" % (duration))}
        {action_respond_info("===============")}
    {% endif %}
    M400
    G4 P{duration}

[gcode_macro _LEDS_TOGGLE]
description: Toggle leds
gcode:
    # command params
    {% set led_name = params.LED|lower %}
    {% set mode = params.MODE|lower %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set leds = printer["gcode_macro _USER_VARIABLE"].neopixel_leds %}
    {% set led = leds[led_name] %}
    {% set led_relay = leds[led_name].relay if leds[led_name].relay %}
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    # features
    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== _LEDS_TOGGLE =====")}
        {action_respond_info("led_name: '%s'" % (led_name))}
        {action_respond_info("mode: '%s'" % (mode))}
        {action_respond_info("leds: '%s'" % (leds))}
        {action_respond_info("led: '%s'" % (led))}
        {action_respond_info("===============")}
    {% endif %}

    {% if led_name and not led %}
        {% set array = namespace(output = "") %}
        {% set element = "Unknown LED '%s'. Defined leds are:" % (led_name) %}
        {% set array.output = array.output + element + "\n"%}
        {% for name, led in leds.items() %}
            {% set element = "'%s' " % (name) %}
            {% set array.output = array.output + element %}
        {% endfor %}
        {action_respond_info("%s" % (array.output))}
    {% elif led_name and led %}
        _LED_TOGGLE LED="{led_name}" MODE="{mode}" {% if led_relay %} RELAY="{led_relay}" {% endif %}
    {% else %}
        {% for led_name, led in leds.items() %}
            _LED_TOGGLE LED="{led.name}" MODE="{mode}" {% if led_relay %} RELAY="{led_relay}" {% endif %}
        {% endfor %}
    {% endif %}

[gcode_macro _LED_TOGGLE]
description: Toggle leds
gcode:
    # command params
    {% set led_name = params.LED|lower %}
    {% set mode = params.MODE|lower %}
    # variables
    {% set relay = printer["gcode_macro _USER_VARIABLE"].neopixel_leds[led_name].relay if printer["gcode_macro _USER_VARIABLE"].neopixel_leds[led_name].relay %}
    {% set leds = {} if 'leds' not in printer.save_variables.variables
            else  printer.save_variables.variables.leds %}
    {% set led = printer.save_variables.variables.leds[led_name] if led_name in printer.save_variables.variables.leds
            else {} %}
    # features
    {% set _dummy = led.update({'mode': mode}) if mode
                    else led.update({'mode': 'manual'}) if led.mode == 'auto'
                    else led.update({'mode': 'off'}) if led.mode == 'manual'
                    else led.update({'mode': 'auto'}) %}
    {% if (led.mode == 'auto') or (led.mode == 'manual') %}
        {% if relay %}
            SET_PIN PIN={relay} VALUE=1
            {% set _dummy = led.update({'relay': 'on'}) %}
        {% endif %}
        {% if led.mode == 'manual' %}
            _SET_LED_STATE_BY_NAME LED={led_name} STATE="on" TRANSMIT=1
            # {% set state = printer["gcode_macro _USER_VARIABLE"].neopixel_leds[led_name].states['on'] %}
            {% set _dummy = led.update({'state': 'on'}) %}
        {% endif %}
    {% else %}
        {% if relay %}
            SET_PIN PIN={relay} VALUE=0
            {% set _dummy = led.update({'relay': 'off'}) %}
        {% endif %}
        _SET_LED_STATE_BY_NAME LED={led_name} STATE="off" TRANSMIT=1
        # {% set state = printer["gcode_macro _USER_VARIABLE"].neopixel_leds[led_name].states['off'] %}
        {% set _dummy = led.update({'state': 'off'}) %}
    {% endif %}    
    {% set _dummy = leds.update({led_name: led}) %}
    {action_respond_info("%s mode: %s" % (led_name|capitalize, leds[led_name].state|capitalize))}
    SAVE_VARIABLE VARIABLE=leds VALUE="{leds}"

[gcode_macro _SET_BRIGHTNESS]
description: Increase/decrease brightness
gcode:
    # command params
    {% set led_name = params.LED|lower %}
    {% set brightness_mx = params.BRIGHTNESS|float %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set neopixel_leds = printer["gcode_macro _USER_VARIABLE"].neopixel_leds %}
    {% set neopixel_led = neopixel_leds[led_name] %}
    {% set current_state = printer.save_variables.variables.leds[led_name].state %}
    {% set state = neopixel_led.states[current_state] %}
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    {% set red = 0 %}
    {% set green = 0 %}
    {% set blue = 0 %}
    {% set white = 0 %}
    # features
 	{% if printer["gcode_macro _USER_VARIABLE"].respond.codeflow %} _PROC_START function=_SET_BRIGHTNESS {% endif %}
        {% if ena_debug == "true" or debug == 1 %}
            {action_respond_info("===== _SET_BRIGHTNESS =====")}
            {action_respond_info("led_name: '%s'" % (led_name))}
            {action_respond_info("state_name: '%s'" % (current_state))}
            {action_respond_info("neopixel_leds: '%s'" % (neopixel_leds))}
            {action_respond_info("===============")}
        {% endif %}
        {% if state.r > 0 %}
            {% set red_brightness = state.r * brightness_mx / 100 %}
            {% set red = state.r + red_brightness %}
        {% endif %}
        {% set red = 1 if red > 1.0 else 0 if red < 0.0 else red %}
        {% if state.g > 0 %} 
            {% set green_brightness = state.g * brightness_mx / 100 %}
            {% set green = state.g + green_brightness %}
        {% endif %}
        {% set green = 1 if green > 1.0 else 0 if green < 0.0 else green %}
        {% if state.b > 0 %} 
            {% set blue_brightness = state.b * brightness_mx / 100 %}
            {% set blue = state.b + blue_brightness %}
        {% endif %}
        {% set blue = 1 if blue > 1.0 else 0 if blue < 0.0 else blue %}
        {% if state.w > 0 %} 
            {% set white_brightness = state.w * brightness_mx / 100 %}
            {% set white = state.w + white_brightness %}
        {% endif %}
        {% set white = 1 if white > 1.0 else 0 if white < 0.0 else white %}

        {% set _dummy = neopixel_leds[led_name].update({'brightness_mx': brightness_mx|float}) %}
            # {action_respond_info("Brightness set to %s%d%s" % ('+' if brightness_mx > 0 else '', brightness_mx, '%'))}
            # {action_respond_info("Original r:%s g:%s b:%s w:%s" % (state.r, state.g, state.b, state.w))}
            # {action_respond_info("Calculated r:%s g:%s b:%s w:%s" % (red, green, blue, white))}
        _SET_LEDS LED={neopixel_led.name} RED={red} GREEN={green} BLUE={blue} WHITE={white} INDEX="{neopixel_led.index}" TRANSMIT=1 DEBUG={debug}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=neopixel_leds VALUE="{neopixel_leds}"
	{% if printer["gcode_macro _USER_VARIABLE"].respond.codeflow %} _PROC_END function=_SET_BRIGHTNESS {% endif %}

